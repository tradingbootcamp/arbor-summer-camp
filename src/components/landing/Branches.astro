---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import BranchCard from "@components/branches/BranchCard.astro";
import { getLangFromUrl, useTranslatedPath, useTranslations } from "@i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { class: className } = Astro.props;

const allBranches = (await getCollection("branches"))
	.filter((branch) => {
		const [postLang, ...slug] = branch.slug.split("/");
		return postLang === lang;
	})
	.map((branch) => {
		const [postLang, slug] = branch.slug.split("/");

		return {
			...branch,
			slug: slug,
		};
	})
	.sort((a, b) => {
		if (a.data.order !== b.data.order) {
			return a.data.order - b.data.order;
		}
		return Number(b.data.pubDate) - Number(a.data.pubDate);
	});
---

<section id="branches" class:list={["section branches-section home-dark-section", className]}>
	<div class="col-start-1 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<h2 class="text-center">Branches</h2>
		<h4 class="text-md font-bold mb-12 text-center text-gray-500">A bootcamp, class, or multi-day quest</h3>
		<ol class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 sm:gap-y-10">
			{
				allBranches.map((branch) => {
					// Special case for Trading Bootcamp and How to Edit
					const instructorWidth = branch.data.title === "Trading Bootcamp" || branch.data.title === "How to Edit" ? "80%" : "60%";
					
					return (
						<BranchCard
							coverImage={branch.data.coverImage.source}
							coverPosition={branch.data.coverImage.position}
							title={branch.data.title}
							shortDescription={branch.data.shortDescription}
							instructor={branch.data.instructor}
							instructorPosition={branch.data.instructor.image.position}
							instructorWidth={instructorWidth}
							cost={branch.data.cost}
							isIncubator={branch.data.isIncubator}
							dates={branch.data.dates}
							link={`/branches/${branch.slug}`}
						/>
					);
				})
			}
		</ol>
	</div>
</section>

<style is:global>
	.branches-section ol li .cover-image {
		--clip: 0%;
		clip-path: inset(var(--clip) round 0.5rem);
	}
	
	/* Add a min-height to ensure proper spacing */
	.branches-section {
		min-height: 60vh;
		position: relative;
		z-index: 1;
		margin-top: 2rem;
	}
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";

	gsap.registerPlugin(ScrollTrigger);

	function init() {
		const previews = gsap.utils.toArray(".branches-section ol li .cover-image") as gsap.DOMTarget[];
		previews.forEach((preview) => {
			gsap.from(preview, {
				scrollTrigger: {
					trigger: preview,
					start: "top bottom",
					end: "center center",
					scroller: window,
					scrub: true,
					markers: false,
				},
				ease: "none",
				"--clip": "10%",
			});
		});

		// Removed the vertical animation that was causing cards to overlap
	}

	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>