---
import LinkBlend from "@components/global/LinkBlend.astro";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@i18n/utils";
import { PATHS } from "@config/constants";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div class="absolute top-0 left-0 w-full" style="height: 100vh; z-index: 10; pointer-events: none;">
	<div class="relative w-full h-full">
		<div id="scroll-indicator" class="absolute bottom-2 left-1/2 -translate-x-1/2 text-campfire-600 pointer-events-auto">
			<svg xmlns="http://www.w3.org/2000/svg" width="300" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round">
				<path d="M3 10l9 5 9-5"/>
			</svg>
		</div>
	</div>
</div>
<section id="hero" class="section home-dark-section hero hero-background min-h-screen">
	<div class="flex h-full flex-col">
		<div class="relative flex flex-col items-center justify-around rounded-lg pb-10 lg:rounded-4xl" style="min-height: 80vh;">
			<!-- Using flex column instead of absolute positioning for better responsiveness -->
			<div
				class="flex w-fit flex-col items-center justify-center gap-4 rounded-xl bg-slate-400 bg-opacity-70 p-6 sm:rounded-3xl md:gap-4 md:rounded-4xl md:p-12 lg:gap-4">
				<!-- Date line above the title -->
				<div class="flex flex-col items-center justify-center">
					<p
						id="hero-date"
						class="text-md flex translate-y-8 flex-col text-center font-mono font-bold text-campfire-700 opacity-0 sm:block md:text-xl">
						<span class="text-sm md:text-xl">Monday, June 2 â€“ Friday, June 6</span>
						<!-- Mobile location -->
						<span class="inline text-sm text-campfire-700 sm:hidden">
							<a href="https://lighthaven.org" target="_blank" class="underline">Lighthaven Campus</a>, Berkeley CA
						</span>
						<!-- Desktop location -->
						<span class="hidden md:inline">|</span>
						<span class="hidden md:inline">
							<a href="https://lighthaven.org" target="_blank" class="underline transition-colors hover:text-campfire-600">
								Lighthaven&nbsp;Campus
							</a>,&nbsp;Berkeley&nbsp;CA
						</span>
					</p>
				</div>
				<!-- Title container -->
				<h1
					id="hero-title"
					class="text-shadow translate-y-8 text-center font-display text-6xl font-extrabold uppercase text-forest-950 opacity-0 sm:text-7xl md:text-7xl lg:text-8xl">
					ARBOR SUMMER CAMP
				</h1>

				<!-- Content below the title -->
				<div class="flex flex-col items-center gap-2 text-center">
					<p id="hero-subtitle" class="text-shadow-sm max-w-6xl translate-y-8 font-mono text-forest-900 opacity-0 md:text-lg lg:text-xl">
						A <span class="tooltip-trigger relative cursor-help">
							micromester
							<span
								class="tooltip pointer-events-none invisible absolute left-1/2 top-8 z-10 w-40 -translate-x-1/2 rounded bg-white/90 px-2 py-1 font-mono text-xs text-forest-800 opacity-0 shadow-md backdrop-blur-sm transition-opacity duration-200">
								like a minimester, but even smaller
							</span>
						</span> of workshops and bootcamps the week between
						<a href="https://less.online" target="_blank" class="text-forest-900 underline transition-colors hover:text-campfire-600">
							LessOnline
						</a>&nbsp;and&nbsp;<a
							href="https://manifest.is"
							target="_blank"
							class="text-forest-900 underline transition-colors hover:text-campfire-600">
							Manifest
						</a>
					</p>
					<div id="hero-cta" class="mt-4 flex translate-y-8 flex-col items-center justify-center gap-3 opacity-0 lg:col-start-1">
						<div class="rounded-lg bg-campfire-500 transition-colors hover:bg-campfire-600" data-cursor-hover data-cursor-parallax>
							<a
								class="flex w-full flex-1 items-center justify-center px-6 py-2 font-display text-4xl font-bold text-white transition-all hover:text-white sm:w-auto sm:text-5xl lg:px-8"
								aria-label="Buy Tickets"
								href={PATHS.TICKETS}
								target="_blank"
								rel="noopener">
								tickets
							</a>
						</div>

						<small class="font-medium text-forest-900">
							or
							<LinkBlend id="go-projects-button" isButton={true} class="text-campfire-800 hover:text-campfire-500"
								>scroll to see more</LinkBlend
							>
						</small>
					</div>
					
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	.hero {
		padding-bottom: 0;
		position: relative;
		border-radius: inherit;
		overflow: hidden;
	}
	.hero > div {
		grid-column: 1 / span 12;
	}

	/* Background image with fade effect */
	.hero-background {
		position: relative;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-image: url("/images/oli_asc_cover.png");
		background-size: cover;
		background-position: center;
		background-repeat: no-repeat;
		z-index: 0;
		mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 1) 80%, rgba(0, 0, 0, 0) 100%);
		-webkit-mask-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.8) 80%, rgba(0, 0, 0, 0) 100%);
		/* Add a brightness filter to make the image sunnier */
		filter: brightness(1.2) saturate(1.2);
	}

	/* Replace dark overlay with a light, sunny one */
	.hero-background::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		/* Use a light golden overlay instead of dark */
		background: linear-gradient(to bottom, rgba(255, 236, 179, 0.3), rgba(245, 158, 11, 0));
		z-index: -1;
	}

	/* Hero appearance */
	.hero h1,
	.hero h2,
	.hero h3 {
		margin: 0;
	}

	/* Adjust text shadow for better readability on bright background */
	.text-shadow {
		text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
	}

	.text-shadow-sm {
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
	}

	/* Tooltip styles */
	.tooltip-trigger {
		/* Removed the border-bottom style */
	}

	.tooltip::after {
		content: "";
		position: absolute;
		bottom: 100%; /* Changed from top to bottom */
		left: 50%;
		transform: translateX(-50%);
		border-width: 5px;
		border-style: solid;
		border-color: transparent transparent rgba(255, 255, 255, 0.9) transparent; /* Changed arrow direction */
	}
	/* Scroll indicator styles */
	/* #scroll-indicator {
		animation: flowDown 2s ease--out infinite;
	}

	@keyframes flowDown {
		0% {
			transform: translate(-50%, 0);
			opacity: 0.9;
		}
		50% {
			transform: translate(-50%, 39px);
			opacity: 0.1;
		}
		100% {
			transform: translate(-50%, 40px);
			opacity: 0;
		}
	} */
</style>

<script>
	import { gsap } from "gsap";
	import { ScrollTrigger } from "gsap/ScrollTrigger";
	import { ScrollToPlugin } from "gsap/ScrollToPlugin";

	gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

	function init() {
		// Sequential animation for all elements
		const heroDate = document.getElementById("hero-date");
		const heroTitle = document.getElementById("hero-title");
		const heroSubtitle = document.getElementById("hero-subtitle");
		const heroCta = document.getElementById("hero-cta");

		// Create a timeline for sequential animation - no need to set initial states in JS
		// as they're now set in the HTML/CSS
		const tl = gsap.timeline();

		// Animate date first
		tl.to(heroDate, {
			duration: 0.8,
			opacity: 1,
			y: 0,
			ease: "power3.out",
		});

		// Then animate title
		tl.to(
			heroTitle,
			{
				duration: 1,
				opacity: 1,
				y: 0,
				ease: "power3.out",
			},
			"-=0.4",
		); // Start slightly before the previous animation finishes

		// Then animate subtitle
		tl.to(
			heroSubtitle,
			{
				duration: 0.8,
				opacity: 1,
				y: 0,
				ease: "power3.out",
			},
			"-=0.4",
		);

		// Finally animate CTA
		tl.to(
			heroCta,
			{
				duration: 0.8,
				opacity: 1,
				y: 0,
				ease: "power3.out",
			},
			"-=0.4",
		);

		// Handle scroll button
		const goProjectsButton = document.getElementById("go-projects-button");
		goProjectsButton?.addEventListener("click", function () {
			gsap.to(window, { duration: 0.5, scrollTo: "#explanation" });
		});

		// Tooltip functionality
		const tooltipTriggers = document.querySelectorAll(".tooltip-trigger");

		tooltipTriggers.forEach((trigger) => {
			const tooltip = trigger.querySelector(".tooltip");

			// For desktop: mouseover/mouseout
			trigger.addEventListener("mouseenter", () => {
				if (tooltip) {
					gsap.to(tooltip, {
						opacity: 1,
						visibility: "visible",
						duration: 0.2,
						ease: "power1.out",
					});
				}
			});

			trigger.addEventListener("mouseleave", () => {
				if (tooltip) {
					gsap.to(tooltip, {
						opacity: 0,
						visibility: "hidden",
						duration: 0.2,
						ease: "power1.in",
					});
				}
			});

			// For mobile: touch events
			trigger.addEventListener("touchstart", (e) => {
				e.preventDefault();
				if (tooltip) {
					// Toggle tooltip visibility
					if (tooltip.style.opacity === "1") {
						gsap.to(tooltip, {
							opacity: 0,
							visibility: "hidden",
							duration: 0.2,
							ease: "power1.in",
						});
					} else {
						gsap.to(tooltip, {
							opacity: 1,
							visibility: "visible",
							duration: 0.2,
							ease: "power1.out",
						});
					}
				}
			});

			// Close tooltip when clicking elsewhere on mobile
			document.addEventListener("touchstart", (e) => {
				if (!trigger.contains(e.target) && tooltip && tooltip.style.opacity === "1") {
					gsap.to(tooltip, {
						opacity: 0,
						visibility: "hidden",
						duration: 0.2,
						ease: "power1.in",
					});
				}
			});
		});
	}
	// Handle scroll indicator visibility
	const scrollIndicator = document.getElementById("scroll-indicator");
	if (scrollIndicator) {
		// Variable to track the maximum opacity based on scroll
		let scrollOpacity = 1;
		const TOTAL_DISPLACEMENT = 25;
		const FADE_IN_DURATION = 0.25;
		const FADE_OUT_DURATION = .5;
		const ANIMATION_DURATION = 2.3;
		
		// Set initial state
		gsap.set(scrollIndicator, {
			opacity: 1,
			y: 0
		});

		// Create a simple progress animation that we'll use to calculate position and opacity
		let progress = { value: 0 };
		
		const pulseAnimation = gsap.to(progress, {
			value: 1,
			duration: ANIMATION_DURATION,
			ease: "none",
			repeat: -1,
			onUpdate: () => {
				const currentProgress = progress.value;
				
				// Calculate y position (always goes from 0 to TOTAL_DISPLACEMENT)
				const yPosition = currentProgress * TOTAL_DISPLACEMENT;
				
				// Calculate opacity based on progress and scrollOpacity
				let opacity;
				if (currentProgress <= FADE_IN_DURATION / ANIMATION_DURATION) {
					// Fade in phase
					const fadeInProgress = currentProgress / (FADE_IN_DURATION / ANIMATION_DURATION);
					opacity = fadeInProgress * scrollOpacity;
				} else if (currentProgress >= 1 - FADE_OUT_DURATION / ANIMATION_DURATION) {
					// Fade out phase
					const fadeOutStart = (1 - FADE_OUT_DURATION / ANIMATION_DURATION);
					const fadeOutProgress = (currentProgress - fadeOutStart)/(1 - fadeOutStart);
					opacity = scrollOpacity * (1 - fadeOutProgress);
				} else {
					opacity = scrollOpacity;
				}
				
				gsap.set(scrollIndicator, {
					y: yPosition,
					opacity: opacity
				});
			},
			onRepeat: () => {
				// Reset progress
				progress.value = 0;
			}
		});

		// Create scroll-triggered fade effect (updates the max opacity)
		window.addEventListener("scroll", () => {
			const scrollY = window.scrollY;
			const viewportHeight = window.innerHeight;
			
			// Start fading when we've scrolled 20% of viewport height
			// Fully fade out by 80% of viewport height
			const fadeStartPoint = viewportHeight * 0.1;
			const fadeEndPoint = viewportHeight * 0.5;
			
			if (scrollY > fadeStartPoint) {
				// Calculate opacity based on scroll progress
				const fadeProgress = (scrollY - fadeStartPoint) / (fadeEndPoint - fadeStartPoint);
				scrollOpacity = Math.max(0, 1 - fadeProgress);
			} else {
				scrollOpacity = 1;
			}
		});
	}

	// Run the animation as soon as possible, not just on DOMContentLoaded
	init();
	// Keep the DOMContentLoaded listener as a fallback
	document.removeEventListener("DOMContentLoaded", init);
	document.addEventListener("DOMContentLoaded", init);
</script>
